#ifndef NormalDistribution_h__
#define NormalDistribution_h__

//////////////////////////////////////////////////////////////////// 
//                          _ooOoo_                               // 
//                         o8888888o                              // 
//                         88" . "88                              // 
//                         (| ^_^ |)                              // 
//                         O\  =  /O                              // 
//                      ____/`---'\____                           // 
//                    .'  \\|     |//  `.                         // 
//                   /  \\|||  :  |||//  \                        // 
//                  /  _||||| -:- |||||-  \                       // 
//                  |   | \\\  -  /// |   |                       // 
//                  | \_|  ''\---/''  |   |                       // 
//                  \  .-\__  `-`  ___/-. /                       // 
//                ___`. .'  /--.--\  `. . ___                     // 
//              ."" '<  `.___\_<|>_/___.'  >'"".                  // 
//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 // 
//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 // 
//      ========`-.____`-.___\_____/___.-`____.-'========         // 
//                           `=---='                              // 
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        // 
//              佛祖保佑       永无BUG     永不修改                   // 
//////////////////////////////////////////////////////////////////// 

#include <iostream>
#include <vector>
#include <cassert>

using namespace std;
/*
z   0   	1   	2   	3   	4   	5   	6   	7   	8   	9
0	0.5	    0.504	0.508	0.512	0.516	0.52	0.524	0.528	0.532	0.536
0.1	0.54	0.544	0.548	0.552	0.556	0.56	0.564	0.568	0.571	0.575
0.2	0.58	0.583	0.587	0.591	0.595	0.599	0.603	0.606	0.61	0.614
0.3	0.618	0.622	0.626	0.63	0.633	0.637	0.641	0.644	0.648	0.652
0.4	0.655	0.659	0.663	0.666	0.67	0.674	0.677	0.681	0.684	0.688
0.5	0.692	0.695	0.699	0.702	0.705	0.709	0.712	0.716	0.719	0.722
0.6	0.726	0.729	0.732	0.736	0.74	0.742	0.745	0.749	0.752	0.755
0.7	0.758	0.761	0.764	0.767	0.77	0.773	0.776	0.779	0.782	0.785
0.8	0.788	0.791	0.794	0.797	0.8	    0.802	0.805	0.808	0.811	0.813
0.9	0.816	0.819	0.821	0.824	0.826	0.829	0.832	0.834	0.837	0.839
1	0.841	0.844	0.846	0.849	0.851	0.853	0.855	0.858	0.85	0.862
1.1	0.864	0.867	0.869	0.871	0.873	0.875	0.877	0.879	0.881	0.883
1.2	0.885	0.887	0.889	0.891	0.893	0.894	0.896	0.898	0.9 	0.902
1.3	0.903	0.905	0.907	0.908	0.91	0.912	0.913	0.915	0.916	0.918
1.4	0.919	0.921	0.922	0.924	0.925	0.927	0.928	0.929	0.931	0.932
1.5	0.933	0.935	0.936	0.937	0.938	0.939	0.941	0.942	0.943	0.944
1.6	0.945	0.946	0.947	0.948	0.95	0.951	0.952	0.953	0.954	0.955
1.7	0.955	0.956	0.957	0.958	0.959	0.96	0.961	0.962	0.963	0.963
1.8	0.964	0.965	0.966	0.966	0.967	0.968	0.969	0.969	0.97	0.971
1.9	0.971	0.972	0.973	0.973	0.974	0.974	0.975	0.976	0.976	0.977
2	0.977	0.978	0.978	0.979	0.979	0.98	0.98	0.981	0.981	0.982
2.1	0.982	0.983	0.983	0.983	0.984	0.984	0.985	0.985	0.985	0.986
2.2	0.986	0.986	0.987	0.987	0.988	0.988	0.988	0.988	0.989	0.989
2.3	0.989	0.99	0.99	0.99	0.99	0.991	0.991	0.991	0.991	0.992
2.4	0.992	0.992	0.992	0.993	0.993	0.993	0.993	0.993	0.993	0.994
2.5	0.994	0.994	0.994	0.994	0.995	0.995	0.995	0.995	0.995	0.995
2.6	0.995	0.996	0.996	0.996	0.996	0.996	0.996	0.996	0.996	0.996
2.7	0.997	0.997	0.997	0.997	0.997	0.997	0.997	0.997	0.997	0.997
        */

const int MAX_STD_NORMAL_ROW = 28;
const int MAX_STD_NORMAL_COL = 10;

double g_dStdNormalMap[MAX_STD_NORMAL_ROW][MAX_STD_NORMAL_COL]  = { 
0.5,    0.504,	0.508,	0.512,	0.516,	0.52,	0.524,	0.528,	0.532,	0.536,
0.54,	0.544,	0.548,	0.552,	0.556,	0.56,	0.564,	0.568,	0.571,	0.575,
0.58,	0.583,	0.587,	0.591,	0.595,	0.599,	0.603,	0.606,	0.61,	0.614,
0.618,	0.622,	0.626,	0.63,	0.633,	0.637,	0.641,	0.644,	0.648,	0.652,
0.655,	0.659,	0.663,	0.666,	0.67,	0.674,	0.677,	0.681,	0.684,	0.688,
0.692,	0.695,	0.699,	0.702,	0.705,	0.709,	0.712,	0.716,	0.719,	0.722,
0.726,	0.729,	0.732,	0.736,	0.74,	0.742,	0.745,	0.749,	0.752,	0.755,
0.758,	0.761,	0.764,	0.767,	0.77,	0.773,	0.776,	0.779,	0.782,	0.785,
0.788,	0.791,	0.794,	0.797,	0.8 ,	0.802,	0.805,	0.808,	0.811,	0.813,
0.816,	0.819,	0.821,	0.824,	0.826,	0.829,	0.832,	0.834,	0.837,	0.839,
0.841,	0.844,	0.846,	0.849,	0.851,	0.853,	0.855,	0.858,	0.85,	0.862,
0.864,	0.867,	0.869,	0.871,	0.873,	0.875,	0.877,	0.879,	0.881,	0.883,
0.885,	0.887,	0.889,	0.891,	0.893,	0.894,	0.896,	0.898,	0.9	 ,  0.902,
0.903,	0.905,	0.907,	0.908,	0.91,	0.912,	0.913,	0.915,	0.916,	0.918,
0.919,	0.921,	0.922,	0.924,	0.925,	0.927,	0.928,	0.929,	0.931,	0.932,
0.933,	0.935,	0.936,	0.937,	0.938,	0.939,	0.941,	0.942,	0.943,	0.944,
0.945,	0.946,	0.947,	0.948,	0.95,	0.951,	0.952,	0.953,	0.954,	0.955,
0.955,	0.956,	0.957,	0.958,	0.959,	0.96,	0.961,	0.962,	0.963,	0.963,
0.964,	0.965,	0.966,	0.966,	0.967,	0.968,	0.969,	0.969,	0.97,	0.971,
0.971,	0.972,	0.973,	0.973,	0.974,	0.974,	0.975,	0.976,	0.976,	0.977,
0.977,	0.978,	0.978,	0.979,	0.979,	0.98,	0.98,	0.981,	0.981,	0.982,
0.982,	0.983,	0.983,	0.983,	0.984,	0.984,	0.985,	0.985,	0.985,	0.986,
0.986,	0.986,	0.987,	0.987,	0.988,	0.988,	0.988,	0.988,	0.989,	0.989,
0.989,	0.99,	0.99,	0.99,	0.99,	0.991,	0.991,	0.991,	0.991,	0.992,
0.992,	0.992,	0.992,	0.993,	0.993,	0.993,	0.993,	0.993,	0.993,	0.994,
0.994,	0.994,	0.994,	0.994,	0.995,	0.995,	0.995,	0.995,	0.995,	0.995,
0.995,	0.996,	0.996,	0.996,	0.996,	0.996,	0.996,	0.996,	0.996,	0.996,
0.997,	0.997,	0.997,	0.997,	0.997,	0.997,	0.997,	0.997,	0.997,	0.997, 
};
 
class CNormalDistribution
{ 

public: 
    CNormalDistribution() { } 
    ~CNormalDistribution() { } 

public: 
    double get_NormalProbability(double x, double mean = 0, double std = 1)
    {
        double Nx = (x - mean) / std;
        return get_stdNormalProbability(Nx);

    }

    double get_stdNormalProbability(double x)
    {
        double fx = fabs(x);

        double p = stdProbability(fx);

        return x < 0 ? 1 - p : p;
    }

private: 
    double stdProbability(double x)
    {
        assert(x >= 0);
 
        int row = (int)(x * 10);
        int col = (int)(x * 100) - row * 10;

        return stdNormal(row, col);
    }

    double stdNormal(int row, int col)
    {
        // max row id is 28 - 1, 
        // max col id is 10 - 1, 
        assert(0 <= row);
        assert(0 <= col && col < 10);

        // double g_dStdNormalMap[28][10] 
        return row < MAX_STD_NORMAL_ROW ? g_dStdNormalMap[row][col] : 1.0f;
    }

};

#endif // NormalDistribution_h__